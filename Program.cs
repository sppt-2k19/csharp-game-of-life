using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;

namespace c_sharpGameOfLife
{
    class Program
    {
        static string IterateGrid(string grid)
        {
            var lines = grid.Split(new []{'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries);
            var width = lines.FirstOrDefault().Length;
            var height = lines.Count();

            int ComputeNeighbours(int x, int y)
            {
                var arr = new[]
                {
                    (-1, -1), (0, -1), (1, -1),
                    (-1, 0),           (1,  0),
                    (-1, 1),  (0,  1), (1,  1)
                };

                return arr.Select(t =>
                {
                    var (dx, dy) = t;
                    int nx = x + dx, ny = y + dy;
                    if (nx >= 0 && nx < width && ny >= 0 && ny < height &&
                        lines[ny][nx] == '1')
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                }).Sum();
            }

            char Life(int x, int y, char c)
            {
                switch ((c, ComputeNeighbours(x, y)))
                {
                    case var tuple when tuple == ('1', 2):
                        return c;
                    case var tuple when tuple.Item2 == (3):
                        return '1';
                    default:
                        return '0';
                }
            }

            var newLines = lines.Select((line, y) =>
            {
                var chars = line.ToCharArray();
                var values = chars.Select((c, x) => Life(x, y, c)).ToArray();
                return new string(values);
            });
            
            return string.Join("\r\n", newLines);
        }

        static void Main(string[] args)
        {
            string grid = (@"
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000100000000000000000000000000000000
00000000000000000000000000000000000000000000010100000000000000000000000000000000
00000000000000000000000000000000000110000001100000000000011000000000000000000000
00000000000000000000000000000000001000100001100000000000011000000000000000000000
00000000000000000000000011000000010000010001100000000000000000000000000000000000
00000000000000000000000011000000010001011000010100000000000000000000000000000000
00000000000000000000000000000000010000010000000100000000000000000000000000000000
00000000000000000000000000000000001000100000000000000000000000000000000000000000
00000000000000000000000000000000000110000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
");

            for (var i = 0; i <= 200; i++)
            {
                Console.Clear();
                Console.WriteLine();
                grid = IterateGrid(grid);
                Console.WriteLine(grid);
            }
            
        }
    }
}